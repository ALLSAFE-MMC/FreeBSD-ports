diff --git a/util/cbfstool/lzma/C/LzmaEnc.c b/util/cbfstool/lzma/C/LzmaEnc.c
index e7d14c59a8..f2a832059a 100644
--- a/util/cbfstool/lzma/C/LzmaEnc.c
+++ b/util/cbfstool/lzma/C/LzmaEnc.c
@@ -1246,7 +1246,7 @@ static uint32_t GetOptimum(struct CLzmaEnc *p, uint32_t position, uint32_t *back
         startLen = lenTest + 1;
 
       /* if (_maxMode) */
-        {
+      {
           uint32_t lenTest2 = lenTest + 1;
           uint32_t limit = lenTest2 + p->numFastuint8_ts;
           uint32_t nextRepMatchPrice;
@@ -1290,7 +1290,7 @@ static uint32_t GetOptimum(struct CLzmaEnc *p, uint32_t position, uint32_t *back
               }
             }
           }
-        }
+      }
     }
     }
     /* for (uint32_t lenTest = 2; lenTest <= newLen; lenTest++) */
diff --git a/util/cbfstool/lz4/lib/lz4.c b/util/cbfstool/lz4/lib/lz4.c
index 9c9a9a0d00..d153075dee 100644
--- a/util/cbfstool/lz4/lib/lz4.c
+++ b/util/cbfstool/lz4/lib/lz4.c
@@ -415,7 +415,7 @@ typedef enum { full = 0, partial = 1 } earlyEnd_directive;
 **************************************/
 int LZ4_versionNumber (void) { return LZ4_VERSION_NUMBER; }
 int LZ4_compressBound(int isize)  { return LZ4_COMPRESSBOUND(isize); }
-int LZ4_sizeofState() { return LZ4_STREAMSIZE; }
+int LZ4_sizeofState(void) { return LZ4_STREAMSIZE; }
 
 
 
@@ -1522,7 +1522,7 @@ int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize,
 
 /* Obsolete Streaming functions */
 
-int LZ4_sizeofStreamState() { return LZ4_STREAMSIZE; }
+int LZ4_sizeofStreamState(void) { return LZ4_STREAMSIZE; }
 
 static void LZ4_init(LZ4_stream_t_internal* lz4ds, BYTE* base)
 {
