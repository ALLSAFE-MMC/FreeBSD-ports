--- bin/waagent2.0.orig	2017-06-08 17:53:14 UTC
+++ bin/waagent2.0
@@ -1755,7 +1755,7 @@ Config=waagent.ConfigurationProvider(None)
 format = Config.get("ResourceDisk.Format")
 if format == None or format.lower().startswith("n"):
     sys.exit(0)
-device_base = 'da1'
+device_base = 'ada1'
 device = "/dev/" + device_base
 for entry in RunGetOutput("mount")[1].split():
     if entry.startswith(device + "s1"):
@@ -1819,16 +1819,22 @@ class FreeBSDDistro(AbstractDistro):
         self.waagent_conf_file = FreeBSDWaagentConf
         
     def installAgentServiceScriptFiles(self):
-        SetFileContents(self.init_script_file, self.init_file)
-        os.chmod(self.init_script_file, 0777)
-        AppendFileContents("/etc/rc.conf","waagent_enable='YES'\n")
+        # SetFileContents(self.init_script_file, self.init_file)
+        # os.chmod(self.init_script_file, 0777)
+        # AppendFileContents("/etc/rc.conf","waagent_enable='YES'\n")
         return 0
 
     def registerAgentService(self):
-        self.installAgentServiceScriptFiles()
-        return Run("services_mkdb " + self.init_script_file)
+        # self.installAgentServiceScriptFiles()
+        # return Run("services_mkdb " + self.init_script_file)
+        return 0
 
-        
+    def restartSshService(self):
+        """
+        Service call to re(start) the SSH service
+        """
+        return Run("pfSctl -c 'service restart sshd'")
+
     def sshDeployPublicKey(self,fprint,path):
         """
         We support PKCS8.
@@ -1838,6 +1844,12 @@ class FreeBSDDistro(AbstractDistro):
         else :
             return 0
 
+    def setHostname(self, name):
+        """
+        Run php script to update in pfsense config and on running system
+        """
+        return Run("/usr/local/sbin/set-pfsense-hostname " + name)
+
     def deleteRootPassword(self):
         """
         BSD root password removal.
@@ -1854,7 +1866,7 @@ class FreeBSDDistro(AbstractDistro):
         return 0
 
     def changePass(self,user,password):
-        return RunSendStdin("pw usermod " + user + " -h 0 ",password, log_cmd=False)
+        return Run("/usr/local/sbin/set-pfsense-password {0} '{1}'".format(user, password))
     
     def load_ata_piix(self):
         return 0
@@ -1885,7 +1897,7 @@ class FreeBSDDistro(AbstractDistro):
         return iface
 
     def RestartInterface(self, iface):
-        Run("service netif restart")
+        Run("pfSctl -c 'interface reconfigure iface'")
 
     def GetIpv4Address(self):
         """
@@ -1957,62 +1969,24 @@ class FreeBSDDistro(AbstractDistro):
         and sudo permissions.
         Returns None if successful, error string on failure.
         """
-        userentry = None
-        try:
-            userentry = pwd.getpwnam(user)
-        except:
-            pass
-        uidmin = None
-        try:
-            if os.path.isfile("/etc/login.defs"):
-                uidmin = int(GetLineStartingWith("UID_MIN", "/etc/login.defs").split()[1])
-        except:
-            pass
-        if uidmin == None:
-            uidmin = 100
-        if userentry != None and userentry[2] < uidmin:
-            Error("CreateAccount: " + user + " is a system user. Will not set password.")
-            return "Failed to set password for system user: " + user + " (0x06)."
-        if userentry == None:
-            command = "pw useradd " + user + " -m"
-            if expiration != None:
-                command += " -e " + expiration.split('.')[0]
-            if Run(command):
-                Error("Failed to create user account: " + user)
-                return "Failed to create user account: " + user + " (0x07)."
-            else:
-                Log("CreateAccount: " + user + " already exists. Will update password.")
-        
-        if password != None:
-            self.changePass(user,password)
-        try:
-            # for older distros create sudoers.d
-            if not os.path.isdir(MyDistro.sudoers_dir_base+'/sudoers.d/'):
-                # create the /etc/sudoers.d/ directory
-                os.mkdir(MyDistro.sudoers_dir_base+'/sudoers.d')
-                # add the include of sudoers.d to the /etc/sudoers
-                SetFileContents(MyDistro.sudoers_dir_base+'/sudoers',GetFileContents(MyDistro.sudoers_dir_base+'/sudoers')+'\n#includedir ' + MyDistro.sudoers_dir_base + '/sudoers.d\n')
-            if password == None:
-                SetFileContents(MyDistro.sudoers_dir_base+"/sudoers.d/waagent", user + " ALL = (ALL) NOPASSWD: ALL\n")
-            else:
-                SetFileContents(MyDistro.sudoers_dir_base+"/sudoers.d/waagent", user + " ALL = (ALL) ALL\n")
-            os.chmod(MyDistro.sudoers_dir_base+"/sudoers.d/waagent", 0440)
-        except:
-            Error("CreateAccount: Failed to configure sudo access for user.")
-            return "Failed to configure sudo privileges (0x08)."
-        home = MyDistro.GetHome()
+
+        command = "/usr/local/sbin/add-pfsense-user " + user
+        if expiration != None:
+            command += " " + expiration
+        else:
+            command += " ''"
         if thumbprint != None:
-            dir = home + "/" + user + "/.ssh"
-            CreateDir(dir, user, 0700)
-            pub = dir + "/id_rsa.pub"
-            prv = dir + "/id_rsa"
-            Run("ssh-keygen -y -f " + thumbprint + ".prv > " + pub)
-            SetFileContents(prv, GetFileContents(thumbprint + ".prv"))
-            for f in [pub, prv]:
-                os.chmod(f, 0600)
-                ChangeOwner(f, user)
-            SetFileContents(dir + "/authorized_keys", GetFileContents(pub))
-            ChangeOwner(dir + "/authorized_keys", user)
+            Log("thumprint is: " + thumbprint)
+            command += " '" + RunGetOutput("ssh-keygen -y -f " + thumbprint + ".prv") + "'"
+        else:
+            command += " ''"
+        if password != None:
+            command += " " + password
+        else:
+            command += " ''"
+        if Run(command):
+            Error("Failed to create user account: " + user)
+            return "Failed to create user account: " + user + " (0x07)."
         Log("Created user account: " + user)
         return None
     
@@ -2074,6 +2048,9 @@ class FreeBSDDistro(AbstractDistro):
         Set /etc/ssh/sshd_config ClientAliveInterval to 180
         Call ApplyVNUMAWorkaround()
         """
+        # for pfSense, files have already been copied to correct
+        # locations in the generated image
+        return 0
         if MyDistro.checkDependencies():
             return 1
         os.chmod(sys.argv[0], 0755)
@@ -4699,8 +4676,9 @@ class OvfEnv(object):
                 (a.startswith("PasswordAuthentication") or a.startswith("ChallengeResponseAuthentication")),
                 GetFileContents(filepath).split('\n'))) + "\nPasswordAuthentication no\nChallengeResponseAuthentication no\n")
             Log("Disabled SSH password-based authentication methods.")
-        if self.AdminPassword != None:
-            MyDistro.changePass('root',self.AdminPassword)
+        # change the existing administrative passwords
+        MyDistro.changePass('root',self.UserPassword)
+        MyDistro.changePass('admin',self.UserPassword)
         if self.UserName != None:
             error = MyDistro.CreateAccount(self.UserName, self.UserPassword, None, None)
         sel = MyDistro.isSelinuxRunning()
@@ -4724,6 +4702,9 @@ class OvfEnv(object):
             MyDistro.setSelinuxContext(path,'unconfined_u:object_r:ssh_home_t:s0')
             if path.startswith(os.path.normpath(home + "/" + self.UserName + "/")):
                 ChangeOwner(path, self.UserName)
+                pubkey = GetFileContents(path).strip()
+                Run("/usr/local/sbin/set-pfsense-sshkey {0} '{1}'".format(self.UserName, pubkey))
+                Run("/usr/local/sbin/set-pfsense-sshkey admin '{0}'".format(pubkey))
         for keyp in self.SshKeyPairs:
             Log("Deploy key pair:{0}".format(keyp[0]))
             if not os.path.isfile(keyp[0] + ".prv"):
@@ -5257,6 +5238,25 @@ class Agent(Util):
         Discover the wire server via DHCP option 245.
         And workaround incompatibility with Azure DHCP servers.
         """
+        leaseFile = '/var/db/dhclient.leases.hn0'
+        # find the value in the last occurence of option-245 in lease file
+        mgmtIpHex = None
+        for line in GetFileContents(leaseFile).split('\n'):
+            tokens = line.strip().split()
+            if len(tokens) == 3 and tokens[1] == 'option-245':
+                mgmtIpHex = tokens[2].rstrip(';')
+
+        if not mgmtIpHex:
+            return None
+
+        addrStr = str()
+        for byte in mgmtIpHex.split(':'):
+            if addrStr:
+                addrStr += '.'
+            addrStr += str(int(byte, 16))
+
+        return addrStr
+
         ShortSleep = False # Sleep 1 second before retrying DHCP queries.
         ifname=None
 
